# -*- coding: utf-8 -*-
"""
Created on Thu Jan  5 14:54:21 2023

@author: spk6f2

This module contains all the functions and objects required for the application.
"""

from __future__ import print_function

import os.path
import sys
import string
import subprocess
from datetime import datetime

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

import globals_

# If modifying these scopes, delete the file token.json.
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# Update the values in the following three objects (SHEETS --> dict,
# generalCategories --> list and cPLTWCategories --> list)
SHEETS = {
    "Books": {
        "SheetID": "10nw_zsCl9vwJxDV5_dE7kP6kuw7PUhJ2ycEhsvtJTzw",
        "SheetName": "Books Inventory",
    },
    "General": {
        "SheetID": "1IoKPZoVo-kYQ_6f52tYYiQL4QezxsQaESX_aB0ynzB0",
        "SheetName": "General Inventory",
    },
    "PLTW": {
        "SheetID": "1UeB6x-LYNOcEETpTAvMH1rJtQod5z9vYeZCwRZdbjSA",
        "SheetName": "PLTW Inventory",
    },
    "CurrentStatus": {
        "SheetID": "1PYXzaxsv728UCDJWNyXZuvDujVL49owZNAeVCshMC4M",
        "SheetName": "Current Status",
    },
}

generalCategories = ["GT", "GM", "GJ", "GR", "GE", "GI", "GG", "GP"]

PLTWCategories = ["PL", "PE", "PG", "PB", "PC"]


def resourcePath(relativePath):
    """Get absolute path to resource, works for dev and for PyInstaller.

    Fix found on stack overflow to work with exe generated by pyInstaller

    Parameters
    ----------
    relativePath : string
        Name of the file.

    Returns
    -------
    path
        Relative path of the file from the unpacked executable
        location.
        (Refer to how One-File program works with PyInstaller)
    """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        basePath = sys._MEIPASS
    except Exception:
        basePath = os.path.abspath(".")

    return os.path.join(basePath, relativePath)


def retrieveCurrentStatus():
    """Retrieves currently checked-out itemlist.

    Updates the currentStatus object in globals_ module.

    Returns
    -------
    None.

    """
    globals_.currentStatus = getValues(
        SHEETS["CurrentStatus"]["SheetID"], "Checked Out List!A:B"
    )


def checkAndUpdateCurrentStatus(item):
    """Checks to see if the item had already been checked-out or not.


    Parameters
    ----------
    item : string
        Itemcode can be an integer string or alphnumeric string
        starting with two characters denoting the item category.

    Returns
    -------
    bool
        True if item already checked-out. False otherwise.

    """
    if item in globals_.currentStatus:
        return True
    else:
        return False


def getSheetColumn(itemColumnToBeInserted, item):
    """Computes the column alphabet, new data is to be entered in.

    Parameters
    ----------
    itemColumnToBeInserted : integer
        This is the no. of data cells in the row of the item.
    item : itemcode
        Itemcode can be an integer or alphnumeric string starting
        with two characters denoting the item category.

    Returns
    -------
    letter : One alphabet from string.ascii_uppercase
        This alphabet represents a column in the spreadsheet.

    """
    num = itemColumnToBeInserted
    letter = ""
    if num < 26:
        letter = string.ascii_uppercase[num]
    elif num < 702:
        letter = (
            string.ascii_uppercase[int(num / 26) - 1]
            + string.ascii_uppercase[int(num % 26)]
        )
    else:
        if (18278 - num) < 4:
            print(
                f"Consider creating a new sheet. There are only {18278-num} cells available in the sheet for {item}."
            )
        letter = str(
            string.ascii_uppercase[int(((num - 26) / 676) - 1)]
            + string.ascii_uppercase[int(num % 676 / 26) - 1]
            + string.ascii_uppercase[int(num % 26)]
        )
    return letter


def buildCreds():
    """Builds User credentials - Only umsystem emails get access.

    Updates the creds object in globals_ module.

    Returns
    -------
    None.

    """
    # global creds
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(resourcePath("token.json")):
        creds = Credentials.from_authorized_user_file(
            resourcePath("token.json"), SCOPES
        )
        # print(creds)
        globals_.creds = creds
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                resourcePath("credentials.json"), SCOPES
            )
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(resourcePath("token.json"), "w") as token:
            token.write(creds.to_json())
        globals_.creds = creds


def updateCurrentStatus():
    """Updates items in Current Status spreadsheet everytime a
    check-out or check-in operation is performed.

    This operation is necessary to keep the status of items
    updated accross multiple application instances.


    Returns
    -------
    None.

    """
    values = globals_.currentStatus
    values = [[item, str(values[item]["count"])] for item in values]
    values = [
        [
            "" if not item[0].isalnum() else item[0],
            "" if not item[1].isdigit() else item[1],
        ]
        for item in values
    ]
    updateValues(
        SHEETS["CurrentStatus"]["SheetID"],
        "Checked Out List!A2:B",
        "RAW",
        values,
    )


def updateValues(spreadsheet_id, range_name, value_input_option, _values):
    """


    Parameters
    ----------
    spreadsheet_id : string
        Alphanumeric string part of the url of the spreadsheet in
        Google Drive. (Refer to SHEETS dict above)
    range_name : string
        Spreadsheet cell range determined by rangeBuidler().
    value_input_option : string
        Controls how input data should be interpreted and whether input strings are parsed or not.
    _values : list
        check-in or check-out details for items in inventory.

    Raises
    ------
    ValueError
        Raises HttpError exception when update() fails.

    Returns
    -------
    error : exception
        HttpError will be returned when building serivce fails.

    """
    try:
        service = build(
            "sheets",
            "v4",
            credentials=globals_.creds,
            discoveryServiceUrl="https://sheets.googleapis.com/$discovery/rest?version=v4",
        )
        # type(_values) - list of lists
        body = {"values": _values}
        result = (
            service.spreadsheets()
            .values()
            .update(
                spreadsheetId=spreadsheet_id,
                range=range_name,
                valueInputOption=value_input_option,
                body=body,
            )
            .execute()
        )
        print(f"{result.get('updatedCells')} cells updated.")
        # return result
    except HttpError as error:
        print(f"An error occurred: {error}")
        return error


def getValues(spreadsheet_id, range_name, needCount=True):
    """


    Parameters
    ----------
    spreadsheet_id : TYPE
        DESCRIPTION.
    range_name : TYPE
        DESCRIPTION.

    Returns
    -------
    TYPE
        DESCRIPTION.

    """
    try:
        service = build(
            "sheets",
            "v4",
            credentials=globals_.creds,
            discoveryServiceUrl="https://sheets.googleapis.com/$discovery/rest?version=v4",
        )

        result = (
            service.spreadsheets()
            .values()
            .get(spreadsheetId=spreadsheet_id, range=range_name)
            .execute()
        )
        if not needCount:
            # flatten the result into list of elements.
            flatList = [
                element for innerList in result["values"] for element in innerList
            ]
            return flatList

        try:
            valuesDict2 = {
                element[0]: {"index": index + 2, "count": int(element[1])}
                for index, element in enumerate(result["values"][1:])
            }
            return valuesDict2
        except ValueError as error:
            print(f"An error occurred: {error}")
            return

    except HttpError as error:
        print(f"An error occurred: {error}")
        return error
        # research more about os.execv later


def sheetSelector(item):
    """


    Parameters
    ----------
    item : TYPE
        DESCRIPTION.

    Returns
    -------
    TYPE
        DESCRIPTION.

    """
    if item.isnumeric():
        return SHEETS["Books"]["SheetID"]
    elif item[:2] in generalCategories:
        return SHEETS["General"]["SheetID"]
    elif item[:2] in PLTWCategories:
        return SHEETS["PLTW"]["SheetID"]
    else:
        print("Unidentified item code: ", item)
        return


# Gets the titles of all the sheets in a spreadsheet
def getSheets(sheetId):
    """


    Parameters
    ----------
    sheetId : TYPE
        DESCRIPTION.

    Returns
    -------
    TYPE
        DESCRIPTION.

    """
    try:
        service = build(
            "sheets",
            "v4",
            credentials=globals_.creds,
            discoveryServiceUrl="https://sheets.googleapis.com/$discovery/rest?version=v4",
        )
        request = service.spreadsheets().get(spreadsheetId=sheetId)
        response = request.execute()
        return response
    except HttpError as error:
        print(f"An error occurred: {error}")
        return error


def getCategory(item):
    """


    Parameters
    ----------
    item : TYPE
        DESCRIPTION.

    Returns
    -------
    TYPE
        DESCRIPTION.

    """
    category = item[:2]
    if category in generalCategories:
        return generalCategories.index(category)
    elif category in PLTWCategories:
        return PLTWCategories.index(category)
    else:
        return


def callCheckOutItems():
    """Driver function for Checking-out  items.

    This function lets the user scan itemcodes and appends them into
    a list and passes it as an argument to checkOutItems function.

    Returns
    -------
    None.

    """
    scannedList = []
    print("Enter '0' (zero) to cancel ||  '1' to finish after scanning\n")
    print("Scan the items to be checked out")
    while True:
        newScan = input("--> ")
        if newScan == "0":
            return
        elif newScan == "1":
            if len(scannedList) > 0:
                details = input("Who's checking out? --> ")
                if details == "0":
                    return
                while (
                    input("Do you want to proceed with the entered name? (y/n) --> ")
                    != "y"
                ):
                    details = input("Enter the name again --> ")
                details = "Checked out by: " + details
                expectedReturn = input("Enter expected return date --> ")
                if expectedReturn == "0":
                    return
                expectedReturn = "Expected return: " + expectedReturn
                currentTime = datetime.now()
                checkedOutTime = currentTime.strftime("%d/%m/%Y %H:%M:%S")
                checkedOutDetails = (
                    details
                    + ",\n"
                    + expectedReturn
                    + ",\n"
                    + "Checked out at: "
                    + checkedOutTime
                )
                scannedList.sort()
                newCheckOutItems(scannedList, checkedOutDetails)
                return
            else:
                return
        else:
            scannedList.append(newScan)
    return


def callCheckInItems():
    """Driver function for Checking-in items.

    This function lets the user scan itemcodes, appends them into
    a list and passes it as an argument to checkInItems function.

    Returns
    -------
    None.

    """
    scannedList = []
    print("/nEnter '0' (zero) to cancel ||  '1' to finish after scanning\n")
    print("Scan the items to be checked in")
    while True:
        newScan = input("--> ")
        if newScan == "0":
            break
        elif newScan == "1":
            if len(scannedList) > 0:
                details = input("Who's checking in? --> ")
                if details == "0":
                    break
                details = "Checked in by: " + details
                currentTime = datetime.now()
                checkedInTime = currentTime.strftime("%d/%m/%Y %H:%M:%S")
                checkedInDetails = details + ",\n" + "Checked in at: " + checkedInTime
                scannedList.sort()
                newCheckInItems(scannedList, checkedInDetails)
                return
            else:
                break
        else:
            scannedList.append(newScan)
    return


def callGetStatus():
    print("This feature has not been implemented yet.")
    retrieveCurrentStatus()
    for item in globals_.currentStatus:
        pass
    return


def callMenu():
    """Launches the Menu

    Currently supports Check-in, Check-out, Quit, Clear screen
    and Update operations.

    Returns
    -------
    None.

    """
    while True:
        print("\nWhat would you like to do?")
        print("1. Check-out Items (Requires scanning items)")
        print("2. Check-in Items (Requires scanning items)")
        print("3. Get Item(s) Status (Not implemented yet)")
        print("4. Quit Program!")
        print("5. Clear Screen")
        print("6. Update this Application")
        menuOptionInput = str(input("Enter the action you want to perform --> "))
        if menuOptionInput == "1":
            callCheckOutItems()
            # updateSheets(action='checkout')
        elif menuOptionInput == "2":
            callCheckInItems()
            # updateSheets(action='checkin')
        elif menuOptionInput == "3":
            callGetStatus()
        elif menuOptionInput == "4":
            print("\nYou have exited the Inventory Management Program!")
            sys.exit()
        elif menuOptionInput == "5":
            os.system("cls")
        elif menuOptionInput == "6":
            scriptPath = resourcePath("callUpdate.ps1")
            p = subprocess.Popen(["powershell.exe", scriptPath], stdout=sys.stdout)
            p.communicate()
        else:
            print("\nEnter the correct option")


def retrieveBooksAndFlashCards():
    """Retrieves list of Books and Flashcards Inventory from
    Books Inventory Spreadsheet and updates the respective objects in
    globals_ module.


    Returns
    -------
    None.

    """
    globals_.booksList = getValues(SHEETS["Books"]["SheetID"], "(B) Books!A:A", False)
    globals_.flashCardsList = getValues(
        SHEETS["Books"]["SheetID"], "(C) Flash Cards!A:A", False
    )


def newCheckOutItems(scannedList, checkedOutDetails):
    """


    Parameters
    ----------
    scannedList : list
        List of itemcodes scanned by user for checking out.
    checkedOutDetails : string
        String containing the name of the person checking out, date and time.

    Returns
    -------
    None.

    """
    retrieveCurrentStatus()
    itemLists = dict()
    sameItem = False

    for index, item in enumerate(scannedList):
        itemCat = str()
        sheetTitle = str()

        if index > 0 and (item == scannedList[index - 1]):
            sameItem = True
        else:
            sameItem = False

        if item.isnumeric():
            sheetId = SHEETS["Books"]["SheetID"]

            if item in globals_.booksList:
                itemCat = "books"
                sheetTitle = "(B) Books!"
            else:
                itemCat = "flashcards"
                sheetTitle = "(C) Flash Cards!"
        else:
            itemCat = item[:2]
            itemCategory = getCategory(item)

            if itemCategory == None:
                continue

            sheetId = sheetSelector(item)
            sheetTitle = (
                getSheets(sheetId)["sheets"][itemCategory]["properties"]["title"] + "!"
            )

        if itemCat not in itemLists:
            itemLists[itemCat] = getValues(sheetId, sheetTitle + "A:B")

        if sameItem and (
            itemLists[itemCat][item]["count"] > 0
        ):  # keep track of count to update in actual sheets
            itemLists[itemCat][item]["count"] -= 1
            globals_.currentStatus[item]["count"] += 1

            if (itemLists[itemCat][item]["count"] == 0) or (
                item not in scannedList[index + 1 :]
            ):
                updateValues(
                    sheetId,
                    sheetTitle + "B" + str(itemLists[itemCat][item]["index"]),
                    "USER_ENTERED",
                    [[str(itemLists[itemCat][item]["count"])]],
                )

        elif itemLists[itemCat][item]["count"] <= 0:
            print(
                f"No more of this item: '{item}' is available to checkout at this time."
            )

        else:
            itemIndex = str(itemLists[itemCat][item]["index"])
            itemLists[itemCat][item]["count"] -= 1
            itemRowContents = getValues(
                sheetId, sheetTitle + itemIndex + ":" + itemIndex, False
            )
            itemColumnToBeInserted = len(itemRowContents)
            sheetColumnLetter = getSheetColumn(itemColumnToBeInserted, item)

            if item not in globals_.currentStatus:
                globals_.currentStatus[item] = {"index": 0, "count": 0}

            globals_.currentStatus[item]["count"] += 1
            updateValues(
                sheetId,
                sheetTitle + sheetColumnLetter + itemIndex,
                "USER_ENTERED",
                [[checkedOutDetails]],
            )
            updateValues(
                sheetId,
                sheetTitle + "B" + itemIndex,
                "USER_ENTERED",
                [[str(itemLists[itemCat][item]["count"])]],
            )

    updateCurrentStatus()
    return


def newCheckInItems(scannedList, checkedInDetails):
    retrieveCurrentStatus()
    itemLists = dict()
    sameItem = False
    emptyKey = ""
    for index, item in enumerate(scannedList):
        if item in globals_.currentStatus:
            if index > 0 and scannedList[index - 1] == item:
                sameItem = True
            else:
                sameItem = False

            if item.isnumeric():
                sheetId = SHEETS["Books"]["SheetID"]
                if item in globals_.booksList:
                    itemCat = "books"
                    sheetTitle = "(B) Books!"
                else:
                    itemCat = "flashcards"
                    sheetTitle = "(C) Flash Cards!"
            else:
                itemCat = item[:2]
                itemCategory = getCategory(item)

                if itemCategory == None:
                    continue

                sheetId = sheetSelector(item)
                sheetTitle = (
                    getSheets(sheetId)["sheets"][itemCategory]["properties"]["title"]
                    + "!"
                )

            if itemCat not in itemLists:
                itemLists[itemCat] = getValues(sheetId, sheetTitle + "A:B")

            if sameItem:
                globals_.currentStatus[item]["count"] -= 1
                itemLists[itemCat][item]["count"] += 1
                if item not in scannedList[index + 1 :]:
                    itemIndex = str(itemLists[itemCat][item]["index"])
                    updateValues(
                        sheetId,
                        sheetTitle + "B" + itemIndex,
                        "USER_ENTERED",
                        [[str(itemLists[itemCat][item]["count"])]],
                    )

            else:
                itemIndex = str(itemLists[itemCat][item]["index"])
                globals_.currentStatus[item]["count"] -= 1
                itemLists[itemCat][item]["count"] += 1
                itemRowContents = getValues(
                    sheetId, sheetTitle + itemIndex + ":" + itemIndex, False
                )
                itemColumnToBeInserted = len(itemRowContents)
                sheetColumnLetter = getSheetColumn(itemColumnToBeInserted, item)
                updateValues(
                    sheetId,
                    sheetTitle + sheetColumnLetter + itemIndex,
                    "USER_ENTERED",
                    [[checkedInDetails]],
                )
                updateValues(
                    sheetId,
                    sheetTitle + "B" + itemIndex,
                    "USER_ENTERED",
                    [[str(itemLists[itemCat][item]["count"])]],
                )

            if globals_.currentStatus[item]["count"] == 0:
                emptyKey += " "
                globals_.currentStatus[item]["count"] = ""
                globals_.currentStatus[emptyKey] = globals_.currentStatus[item]
                del globals_.currentStatus[item]
                print(f"All instances of item: {item} are returned.")

        else:
            print(
                f"Please check the itemcode: {item} again. The item is either not checkedout or doesnot exist or returned earlier."
            )
    updateCurrentStatus()
    return
